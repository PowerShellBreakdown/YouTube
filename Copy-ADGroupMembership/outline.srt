1
00:00:00,242 --> 00:00:04,102
Hello, in this video series I will be breaking down my PowerShell script

2
00:00:04,281 --> 00:00:08,555
that finds all of the Active Directory groups that one user is a member of

3
00:00:08,631 --> 00:00:11,881
and makes another user a member of those same groups.

4
00:00:12,078 --> 00:00:15,820
This procedure is also commonly known as "permissions mirroring"

5
00:00:16,008 --> 00:00:21,188
and is used to grant one user the same access rights and permissions of another user.

6
00:00:21,352 --> 00:00:24,797
 To demonstrate the manual procedure that our script will automate

7
00:00:24,844 --> 00:00:28,375
We'll first open Active Directory Users and Computers

8
00:00:28,576 --> 00:00:31,974
Double-click on the user to use as a reference

9
00:00:32,216 --> 00:00:35,067
Select the **MemberOf** tab

10
00:00:35,848 --> 00:00:40,380
Keep window open somewhere on the screen where it is visible

11
00:00:41,239 --> 00:00:44,864
Double-click on the user to add to groups

12
00:00:45,911 --> 00:00:49,716
Select the **MemberOf** tab, click **Add...**

13
00:00:50,794 --> 00:00:57,411
Enter the names of the groups from the reference user, seperated by a semicolon (`;`)

14
00:01:01,794 --> 00:01:05,137
Verify the group names with **Check Names**

15
00:01:05,661 --> 00:01:08,278
Click **OK** and **OK** again

16
00:01:09,216 --> 00:01:13,059
While the manual process isn't too cumbersome in our example,

17
00:01:13,114 --> 00:01:15,684
we can use PowerShell to automate this.

18
00:01:17,575 --> 00:01:24,294
In Part 1, I'll show the core script and cover the `Get-ADUser` and `Add-ADGroupMember` commands,

19
00:01:24,411 --> 00:01:27,114
as well as how to store objects as a variable,

20
00:01:27,148 --> 00:01:32,406
and how you can use output of one command as input of another using the pipeline.

21
00:01:34,281 --> 00:01:37,874
In Part 2, we'll add the `Out-GridView` command to the script

22
00:01:38,070 --> 00:01:43,062
to give you an interactive window so you can
select specific groups to add the user to.

23
00:01:44,188 --> 00:01:48,945
Finally, in Part 3, we'll put everything together into an advanced function

24
00:01:49,172 --> 00:01:52,664
and add it to a PowerShell module for long-term reuse.

