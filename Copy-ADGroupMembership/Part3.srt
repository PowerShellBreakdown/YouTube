1
00:00:00,352 --> 00:00:01,492
Hey guys and gals

2
00:00:01,517 --> 00:00:03,882
welcome to Part 3 of the breakdown of my script

3
00:00:03,907 --> 00:00:06,500
which finds all the Active Directory groups

4
00:00:06,525 --> 00:00:08,227
that one user is a member of

5
00:00:08,328 --> 00:00:10,664
and makes another user a member of those same groups.

6
00:00:10,852 --> 00:00:12,031
In this final part,

7
00:00:12,056 --> 00:00:15,344
we'll take our script that we've written in Parts 1 & 2

8
00:00:15,461 --> 00:00:17,336
and add it to an advanced function

9
00:00:17,361 --> 00:00:19,578
which will turn it into a reusable tool

10
00:00:19,617 --> 00:00:21,680
just like native PowerShell cmdlets.

11
00:00:21,719 --> 00:00:23,492
It has positional parameters.

12
00:00:23,517 --> 00:00:28,102
A positional parameter assumes the name of the parameter

13
00:00:28,127 --> 00:00:31,023
by position that you input values.

14
00:00:32,094 --> 00:00:34,648
It will receive input from pipeline.

15
00:00:34,688 --> 00:00:36,070
With this feature,

16
00:00:36,095 --> 00:00:38,352
you can then integrate it into other scripts

17
00:00:38,377 --> 00:00:41,386
and/or use it in conjunction with other commands.

18
00:00:41,411 --> 00:00:43,089
It has switch parameters.

19
00:00:43,214 --> 00:00:47,362
Switch parameters are kind of a toggle (on/off) "switch"

20
00:00:47,387 --> 00:00:49,589
in which no extra input is needed

21
00:00:50,284 --> 00:00:53,597
such as the -UsePicker parameter

22
00:00:53,622 --> 00:00:55,441
which allows us the option

23
00:00:55,466 --> 00:00:58,089
of using the Out-GridView window to select the groups

24
00:00:58,261 --> 00:00:59,753
and the -PassThru parameter

25
00:00:59,778 --> 00:01:02,026
gives us the option of outputting the groups

26
00:01:02,261 --> 00:01:04,066
that our target user was added

27
00:01:04,091 --> 00:01:05,315
to the console.

28
00:01:06,269 --> 00:01:09,831
 This could be useful if you wanted to log/document the action

29
00:01:09,856 --> 00:01:13,159
or pass those groups through the pipeline to another command.

30
00:01:13,706 --> 00:01:15,511
The heart of an advanced function

31
00:01:15,536 --> 00:01:17,573
is found inside the process block.

32
00:01:18,050 --> 00:01:20,636
You can also think of it as the engine

33
00:01:20,661 --> 00:01:22,816
and it's where most of the logic will be placed.

34
00:01:23,417 --> 00:01:25,019
If we compare the process block

35
00:01:25,044 --> 00:01:26,698
with our script from Part 2,

36
00:01:26,761 --> 00:01:28,534
we can see many similarities.

37
00:01:29,566 --> 00:01:32,003
Variable names have slightly changed,

38
00:01:32,066 --> 00:01:33,862
and two "if" statements are added

39
00:01:33,887 --> 00:01:36,558
to take action if the switch parameter is used.

40
00:01:37,847 --> 00:01:39,948
Otherwise, they're the same

41
00:01:39,973 --> 00:01:42,487
because they perform the same core function.

42
00:01:42,893 --> 00:01:44,987
Since the core part of the script is the same,

43
00:01:45,012 --> 00:01:48,128
we're really just changing how it's used.

44
00:01:52,105 --> 00:01:53,792
To create an advanced function,

45
00:01:53,817 --> 00:01:55,464
start by typing "function"

46
00:01:55,620 --> 00:01:57,706
and click on "advanced function".

47
00:01:57,731 --> 00:01:59,222
We see that it's given us

48
00:01:59,247 --> 00:02:00,831
a good template to work with.

49
00:02:03,886 --> 00:02:04,972
Now's a good time

50
00:02:04,997 --> 00:02:06,300
to give the function a name

51
00:02:06,325 --> 00:02:09,269
ensuring that it follows the verb dash noun format

52
00:02:09,294 --> 00:02:12,284
for consistancy with other PowerShell functions and commands.

53
00:02:16,503 --> 00:02:18,417
We can see that the CmdletBinding

54
00:02:18,442 --> 00:02:19,917
is already there for us.

55
00:02:19,942 --> 00:02:21,526
This is what makes a function

56
00:02:21,551 --> 00:02:22,855
an advanced function

57
00:02:22,901 --> 00:02:24,331
and unlocks these features

58
00:02:24,356 --> 00:02:25,839
that I previously described.

59
00:02:27,784 --> 00:02:30,355
We'll begin by adding our first parameter.

60
00:02:32,167 --> 00:02:33,355
In the param block,

61
00:02:33,380 --> 00:02:35,519
simply start typing "parameter"

62
00:02:35,544 --> 00:02:38,995
and choose the "parameter declaration snippet".

63
00:02:40,995 --> 00:02:42,566
In the previous video's script,

64
00:02:42,591 --> 00:02:44,409
the first variable that was created

65
00:02:44,434 --> 00:02:46,175
was the $ReferenceUser variable,

66
00:02:46,347 --> 00:02:48,956
so let's use that as our first parameter.

67
00:02:49,558 --> 00:02:50,589
By default

68
00:02:50,614 --> 00:02:52,558
the order in which we place parameters

69
00:02:52,583 --> 00:02:54,612
will determine the parameter position,

70
00:02:54,800 --> 00:02:55,917
so it also makes sense

71
00:02:55,942 --> 00:02:57,394
to start with $ReferenceUser.

72
00:03:00,144 --> 00:03:02,010
We'll give it a brief description like

73
00:03:02,035 --> 00:03:04,651
"User who's group membership to use as a reference".

74
00:03:04,676 --> 00:03:06,456
Just something so you get an idea

75
00:03:06,481 --> 00:03:08,105
of what the parameter is used for.

76
00:03:10,847 --> 00:03:13,659
Next, we want to give the parameter some attributes.

77
00:03:14,081 --> 00:03:15,753
Because the function will not work

78
00:03:15,778 --> 00:03:17,331
without the reference user,

79
00:03:17,784 --> 00:03:20,058
we will make this parameter "Mandatory".

80
00:03:25,151 --> 00:03:26,198
If you were to attempt

81
00:03:26,223 --> 00:03:27,362
to use the command

82
00:03:27,387 --> 00:03:29,097
without the mandatory parameter,

83
00:03:29,448 --> 00:03:31,464
PowerShell will ask you to input something

84
00:03:31,489 --> 00:03:32,925
before proceeding.

85
00:03:38,175 --> 00:03:39,644
Because this is mandatory,

86
00:03:39,669 --> 00:03:41,237
we should also add a Help Message

87
00:03:41,262 --> 00:03:42,634
to let the person using the command

88
00:03:42,659 --> 00:03:45,573
know what kind of information is mandated.

89
00:03:48,409 --> 00:03:50,573
We also need to seperate the attributes

90
00:03:50,598 --> 00:03:51,683
by a comma ( , )

91
00:03:51,708 --> 00:03:52,924
to let PowerShell know

92
00:03:52,949 --> 00:03:54,425
that we're starting a new attribute

93
00:03:54,450 --> 00:03:55,909
and it's not just a continuation

94
00:03:55,934 --> 00:03:57,378
of something before it.

95
00:04:01,612 --> 00:04:03,300
The last attribute we'll add

96
00:04:03,325 --> 00:04:04,901
is ValueFromPipeline

97
00:04:04,933 --> 00:04:06,831
to enable this parameter to receive input

98
00:04:06,856 --> 00:04:08,284
from the pipeline.

99
00:04:09,355 --> 00:04:11,128
Since there are more than one attribute,

100
00:04:11,167 --> 00:04:13,019
we'll place each one on a new line

101
00:04:13,044 --> 00:04:14,519
to make it easier to read.

102
00:04:17,706 --> 00:04:18,761
The parameter type

103
00:04:18,786 --> 00:04:20,144
determines how PowerShell

104
00:04:20,169 --> 00:04:21,839
treats the input object.

105
00:04:22,933 --> 00:04:23,980
For example:

106
00:04:24,005 --> 00:04:26,167
"2" can be either a number

107
00:04:26,192 --> 00:04:27,456
(known as an integer)

108
00:04:27,691 --> 00:04:28,745
or text

109
00:04:28,770 --> 00:04:30,026
(known as a string).

110
00:04:31,519 --> 00:04:32,550
So if we type:

111
00:04:33,011 --> 00:04:34,511
integer of two,

112
00:04:34,536 --> 00:04:36,800
times integer of two,

113
00:04:37,495 --> 00:04:38,933
we get four.

114
00:04:41,206 --> 00:04:43,433
But if we type: string two

115
00:04:44,511 --> 00:04:46,753
times string two,

116
00:04:46,956 --> 00:04:48,776
we'll get twenty-two,

117
00:04:48,801 --> 00:04:50,909
because it combines strings together.

118
00:04:52,136 --> 00:04:54,034
Since we're mimicking some functionality

119
00:04:54,059 --> 00:04:55,792
of the Get-ADUser cmdlet,

120
00:04:55,831 --> 00:04:58,831
as well as to ensure interoperability with it,

121
00:04:59,026 --> 00:05:01,636
I'm going to use the type from the documentation.

122
00:05:02,370 --> 00:05:04,886
In this case, it's "ADUser".

123
00:05:12,769 --> 00:05:14,620
Before we add a new parameter,

124
00:05:14,645 --> 00:05:15,901
we need to add a comma ( , )

125
00:05:15,926 --> 00:05:17,722
after the $ReferenceUser variable

126
00:05:17,747 --> 00:05:19,167
to indicate that there will be a

127
00:05:19,192 --> 00:05:20,534
follow-on parameter.

128
00:05:21,667 --> 00:05:23,120
We'll add a 2nd parameter

129
00:05:23,145 --> 00:05:24,222
similar to the 1st,

130
00:05:24,247 --> 00:05:25,675
and make a couple  adjustments

131
00:05:25,700 --> 00:05:27,261
for the -TargetUser parameter.

132
00:05:27,839 --> 00:05:30,870
Since this is not going to receive input from the pipeline,

133
00:05:30,895 --> 00:05:32,292
we'll leave that out.

134
00:05:38,511 --> 00:05:41,042
Just like with the Add-ADGroupMember command

135
00:05:41,067 --> 00:05:42,339
from our previous video,

136
00:05:42,745 --> 00:05:44,066
we want to be able to add

137
00:05:44,091 --> 00:05:45,980
one or more users to a group,

138
00:05:46,636 --> 00:05:48,816
so we'll add an opening and closing bracket ( [] )

139
00:05:48,841 --> 00:05:51,034
after "ADPrincipal".

140
00:05:53,448 --> 00:05:54,831
As I've mentioned earlier,

141
00:05:54,856 --> 00:05:58,089
a switch parameter is like a toggle (on/off) switch

142
00:05:58,198 --> 00:06:00,472
in which no extra input is needed.

143
00:06:01,237 --> 00:06:02,425
These will not be mandatory

144
00:06:02,450 --> 00:06:04,120
and will have no attributes.

145
00:06:09,308 --> 00:06:11,980
To simplify the Begin, Process, and End blocks

146
00:06:12,005 --> 00:06:13,753
(also known as Advanced Methods)

147
00:06:14,448 --> 00:06:17,417
he Begin block is for one-time preprocessing

148
00:06:17,442 --> 00:06:20,612
the Process block is for multiple record processing,

149
00:06:20,800 --> 00:06:23,378
and this block is required at a minimum

150
00:06:23,403 --> 00:06:25,901
for processing input from the pipeline

151
00:06:25,995 --> 00:06:29,105
the End block for one-time post-processing.

152
00:06:29,495 --> 00:06:32,511
Because we're not doing any pre or post processing,

153
00:06:32,536 --> 00:06:34,409
and the -ReferenceUser parameter

154
00:06:34,434 --> 00:06:36,394
is receiving input from the pipeline,

155
00:06:36,597 --> 00:06:38,761
only the process block will be used.

156
00:06:39,362 --> 00:06:41,807
Since we've already written most of the script logic,

157
00:06:41,909 --> 00:06:43,838
let's use the previous script as a guide

158
00:06:43,863 --> 00:06:45,894
for what to place in the process block.

159
00:06:53,870 --> 00:06:55,362
We'll add the "if" statements

160
00:06:55,387 --> 00:06:57,464
where we would want to use the switch parameters.

161
00:07:04,839 --> 00:07:07,151
Now that we've finished the logic portion,

162
00:07:07,176 --> 00:07:08,886
let's add some comment-based help.

163
00:07:08,995 --> 00:07:10,339
Comment-based help is a way

164
00:07:10,364 --> 00:07:11,605
 to add helpful information

165
00:07:11,630 --> 00:07:12,894
to your advanced function

166
00:07:12,919 --> 00:07:15,073
that can be retrieved with the Get-Help command.

167
00:07:18,183 --> 00:07:19,519
It's called "comment-based"

168
00:07:19,544 --> 00:07:21,331
because you use it in a block comment.

169
00:07:21,597 --> 00:07:23,831
The position of the comment-based help

170
00:07:24,011 --> 00:07:25,831
should be placed after the "function"

171
00:07:25,856 --> 00:07:27,269
and before the Param block.

172
00:07:28,089 --> 00:07:29,745
Comment-based help is triggered

173
00:07:29,770 --> 00:07:31,464
when you use certain keywords.

174
00:07:31,784 --> 00:07:34,253
While all keywords will probably go unused,

175
00:07:34,278 --> 00:07:36,222
I would recommend that at a minimum,

176
00:07:36,331 --> 00:07:38,433
that a description or synopsys

177
00:07:38,458 --> 00:07:39,956
and examples of the function

178
00:07:39,981 --> 00:07:41,534
be added to the comment block.

179
00:07:49,706 --> 00:07:51,628
Now that we've finished writing the funciton,

180
00:07:51,653 --> 00:07:55,144
save it with a .psm1 file extension

181
00:07:55,169 --> 00:07:57,198
in the PowerShell modules folder.

182
00:08:02,917 --> 00:08:04,925
Import the newly created module,

183
00:08:04,950 --> 00:08:09,183
and then we can use the Copy-ADGroupMembership command in PowerShell.

184
00:08:12,310 --> 00:08:14,873
(Music: "Energy" from Bensound.com)

185
00:08:16,365 --> 00:08:18,553
This is the end of the three-part video series

186
00:08:18,578 --> 00:08:20,873
where I took you on a PowerShell coding journey

187
00:08:20,898 --> 00:08:22,553
starting with a basic script,

188
00:08:22,578 --> 00:08:24,459
adding some cool features to it,

189
00:08:24,484 --> 00:08:26,615
and concluded with an advanced function.

190
00:08:27,381 --> 00:08:29,310
All of the scripts shown in the videos,

191
00:08:29,335 --> 00:08:31,373
as well as the writeup will be on my GitHub,

192
00:08:31,398 --> 00:08:32,646
linked in the description.

193
00:08:33,217 --> 00:08:34,646
If you found the video useful,

194
00:08:34,671 --> 00:08:35,717
push that "like" button

195
00:08:36,771 --> 00:08:38,709
I'll be uploading more videos regularly

196
00:08:38,834 --> 00:08:40,279
so make sure that you're subscribed.

197
00:08:42,250 --> 00:08:43,352
Thank you for watching,

198
00:08:43,377 --> 00:08:44,945
and I hope you learned something.

